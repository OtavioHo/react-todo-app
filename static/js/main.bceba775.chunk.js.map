{"version":3,"sources":["components/Header/index.tsx","models/TodoItemClass.ts","components/TodoList/index.tsx","App.tsx","models/TodoListClass.ts","index.tsx"],"names":["Header","props","TodoItemClass","title","id","Math","random","done","makeObservable","this","observable","toggle","action","TodoList","observer","list","todoList","useState","newTodo","setNewTodo","editing","setEditing","editingValue","setEditingValue","showCompleted","setShowCompleted","startEditing","index","todos","filter","item","saveEdit","e","preventDefault","toggleTask","className","onSubmit","add","type","placeholder","value","onChange","event","target","icon","faPlus","onClick","length","map","size","faCheckCircle","faCircle","faSave","faTimesCircle","store","computed","todo","push","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bceba775.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nexport default function Header(props: any) {\n  return (\n    <header>\n      <h1>To Do List</h1>\n    </header>\n  );\n}\n","import { makeObservable, observable, action } from \"mobx\";\n\nexport default class TodoItemClass {\n  id = Math.random();\n  title = \"\";\n  done = false;\n\n  constructor(title: string) {\n    makeObservable(this, {\n      title: observable,\n      done: observable,\n      toggle: action,\n    });\n\n    this.title = title;\n  }\n\n  toggle() {\n    this.done = !this.done;\n  }\n}\n","import React, { useState, FormEvent } from \"react\";\nimport \"./styles.css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCircle,\n  faCheckCircle,\n  faSave,\n  faTimesCircle,\n  faPlus,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { observer } from \"mobx-react-lite\";\n\nimport TodoListClass from \"../../models/TodoListClass\";\nimport TodoItemClass from \"../../models/TodoItemClass\";\n\ninterface Props {\n  todoList: TodoListClass;\n}\n\nconst TodoList = observer((props: Props) => {\n  const { todoList } = props;\n  const [newTodo, setNewTodo] = useState<string>(\"\");\n  const [editing, setEditing] = useState<number>(-1);\n  const [editingValue, setEditingValue] = useState<string>(\"\");\n  const [showCompleted, setShowCompleted] = useState<boolean>(true);\n\n  const renderList = (list: TodoListClass) =>\n    list.todos.map(\n      (item: TodoItemClass, index: number) =>\n        (showCompleted || !item.done) && (\n          <div className=\"list-item\" key={index}>\n            <div className=\"check-container\" onClick={() => toggleTask(item)}>\n              <FontAwesomeIcon\n                size={\"2x\"}\n                icon={item.done ? faCheckCircle : faCircle}\n              />\n            </div>\n            {editing === item.id ? (\n              <form onSubmit={(event) => saveEdit(event, item)}>\n                <input\n                  className=\"edit-input\"\n                  type=\"text\"\n                  value={editingValue}\n                  onChange={(e) => setEditingValue(e.target.value)}\n                />\n                <button type=\"submit\" className=\"confirm-button\">\n                  <FontAwesomeIcon icon={faSave} />\n                </button>\n                <button\n                  onClick={() => setEditing(-1)}\n                  className=\"last-button cancel-button\"\n                >\n                  <FontAwesomeIcon icon={faTimesCircle} />\n                </button>\n              </form>\n            ) : (\n              <div\n                className={item.done ? \"list-title title-done\" : \"list-title\"}\n                onClick={() => startEditing(item.id)}\n              >\n                {item.title}\n              </div>\n            )}\n          </div>\n        )\n    );\n\n  const createItem = (e: FormEvent) => {\n    e.preventDefault();\n    if (newTodo !== \"\") {\n      todoList.add(new TodoItemClass(newTodo));\n      setNewTodo(\"\");\n    }\n  };\n\n  const startEditing = (index: number) => {\n    setEditingValue(\n      todoList.todos.filter((item) => item.id === index)[0].title\n    );\n    setEditing(index);\n  };\n\n  const saveEdit = (e: FormEvent, item: TodoItemClass) => {\n    e.preventDefault();\n    if (editingValue !== \"\") {\n      item.title = editingValue;\n      setEditing(-1);\n    }\n  };\n\n  const toggleTask = (item: TodoItemClass) => {\n    item.toggle();\n  };\n\n  return (\n    <div>\n      <div className=\"todo-list\">\n        <div className=\"list-item\">\n          <form onSubmit={createItem}>\n            <input\n              className=\"edit-input\"\n              type=\"text\"\n              placeholder=\"New To Do\"\n              value={newTodo}\n              onChange={(event) => setNewTodo(event.target.value)}\n            />\n            <button type=\"submit\" className=\"confirm-button\">\n              <FontAwesomeIcon icon={faPlus} />\n            </button>\n          </form>\n        </div>\n        <div className=\"todo-list\">\n          <button\n            className=\"toggle-checked-button\"\n            onClick={() => setShowCompleted(!showCompleted)}\n          >\n            {showCompleted ? \"Hide Completed\" : \"Show Completed\"}\n          </button>\n          *To edit click on the task title\n        </div>\n      </div>\n      <div className=\"todo-list\">\n        {todoList.length > 0 ? (\n          renderList(todoList)\n        ) : (\n          <div className=\"list-item\">\n            <div className=\"list-title\">No Tasks!</div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nexport default TodoList;\n","import React from \"react\";\n\nimport Header from \"./components/Header\";\nimport TodoList from \"./components/TodoList\";\n\nimport TodoListClass from \"./models/TodoListClass\";\n\nconst store = new TodoListClass([]);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <TodoList todoList={store} />\n    </div>\n  );\n}\n\nexport default App;\n","import { action, computed, makeObservable, observable } from \"mobx\";\nimport TodoItemClass from \"./TodoItemClass\";\n\nexport default class TodoListClass {\n  todos: TodoItemClass[] = [];\n\n  get length() {\n    return this.todos.length;\n  }\n\n  constructor(todos: TodoItemClass[]) {\n    makeObservable(this, {\n      todos: observable,\n      add: action,\n      length: computed,\n    });\n    this.todos = todos;\n  }\n\n  add(todo: TodoItemClass) {\n    this.todos.push(todo);\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}